#!/usr/bin/env ruby 
#  -wKU
#  esearchy
#  
#  Created by FreedomCoder on 2009-10-24.
#  Copyright 2009 FreedomCoder's Labs. All rights reserved.
# 

if  RUBY_PLATFORM =~ /mingw|mswin/
  require 'Win32API'
  class Wcol
    gsh = Win32API.new("kernel32", "GetStdHandle", ['L'], 'L') 
    @textAttr = Win32API.new("kernel32","SetConsoleTextAttribute", ['L','N'], 'I')
    @h = gsh.call(-11)
    
    def self.color(col)
      @textAttr.call(@h,col)
    end
    
    def self.puts(color, text)
      self.color(color)
      Kernel.puts text
      self.color(7)
    end
  end
end


require 'rubygems'
require 'getoptlong'
require 'esearchy'

ESearchy::log = true
@yahoo_key  = nil
@bing_key   = nil
@maxhits    = nil
@docs       = true
@profiling  = false
@params     = {}
@list       = []
@output     = nil

@email_engines = [] #[:Google, :Bing, :Yahoo, :Altavista, :PGP, :Spider ,:Usenet, :GoogleGroups ]
@people_engines = [] #[:LinkedIn, :Naymz, :Classmates, :GoogleProfiles]

opts = GetoptLong.new(
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--enable-all', GetoptLong::NO_ARGUMENT ],
  [ '--enable-people', GetoptLong::NO_ARGUMENT ],
  [ '--enable-emails', GetoptLong::NO_ARGUMENT ],
  [ '--enable-google', GetoptLong::NO_ARGUMENT ],
  [ '--enable-yahoo', GetoptLong::NO_ARGUMENT ],
  [ '--enable-bing', GetoptLong::NO_ARGUMENT ],
  [ '--enable-altavisa', GetoptLong::NO_ARGUMENT ],
  [ '--enable-linkedin', GetoptLong::NO_ARGUMENT ],
  [ '--enable-gprofiles', GetoptLong::NO_ARGUMENT ],
  [ '--enable-naymz', GetoptLong::NO_ARGUMENT ],
  [ '--enable-ggroups', GetoptLong::NO_ARGUMENT ],
  [ '--enable-spoke', GetoptLong::NO_ARGUMENT ],
  [ '--enable-jigsaw', GetoptLong::NO_ARGUMENT ],
  [ '--enable-ziggs', GetoptLong::NO_ARGUMENT ],
  [ '--enable-plaxo', GetoptLong::NO_ARGUMENT ],
  [ '--enable-pgp', GetoptLong::NO_ARGUMENT ],
  [ '--enable-usenet', GetoptLong::NO_ARGUMENT ],
  [ '--enable-spider', GetoptLong::NO_ARGUMENT ],
  [ '--profiling', GetoptLong::NO_ARGUMENT ],
  [ '--disable-google', GetoptLong::NO_ARGUMENT ],
  [ '--disable-yahoo', GetoptLong::NO_ARGUMENT ],
  [ '--disable-bing', GetoptLong::NO_ARGUMENT ],
  [ '--disable-altavisa', GetoptLong::NO_ARGUMENT ],
  [ '--disable-linkedin', GetoptLong::NO_ARGUMENT ],
  [ '--disable-gprofiles', GetoptLong::NO_ARGUMENT ],
  [ '--disable-naymz', GetoptLong::NO_ARGUMENT ],
  [ '--disable-ggroups', GetoptLong::NO_ARGUMENT ],
  [ '--disable-spoke', GetoptLong::NO_ARGUMENT ],
  [ '--disable-jigsaw', GetoptLong::NO_ARGUMENT ],
  [ '--disable-ziggs', GetoptLong::NO_ARGUMENT ],
  [ '--disable-plaxo', GetoptLong::NO_ARGUMENT ],
  [ '--disable-pgp', GetoptLong::NO_ARGUMENT ],
  [ '--disable-usenet', GetoptLong::NO_ARGUMENT ],
  [ '--disable-spider', GetoptLong::NO_ARGUMENT ],
  [ '--disable-docs', GetoptLong::NO_ARGUMENT ],
  [ '--query','-q', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--company','-c', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--website','-w', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--file','-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--filter','-p', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--output','-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--yahookey','-y', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--bingkey','-b', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--maxhits','-m', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--proxy', GetoptLong::REQUIRED_ARGUMENT]
)

def logo
  if  RUBY_PLATFORM =~ /mingw|mswin/ 
    puts "___________ _________                           .__          " 
    puts "\_   _____//   _____/ ____ _____ _______   ____ |  |__ ___.__."
    puts " |    __)_ \_____  \_/ __ \\__  \\_  __ \_/ ___\|  |  <   |  |"
    puts " |        \/        \  ___/ / __ \|  | \/\  \___|   Y  \___  |"
    puts "/_______  /_______  /\___  >____  /__|    \___  >___|  / ____|"
    puts "        \/        \/     \/     \/            \/     \/\/     "
  else
    puts "\033[31m___________ \033\[0m_________                           .__          " 
    puts "\033[31m\\_   _____/\033\[0m/   _____/ ____ _____ _______   ____ |  |__ ___.__."
    puts "\033[31m |    __)_ \033\[0m\\_____  \\_/ __ \\\\__  \\\\_  __ \\_/ ___\\|  |  <   |  |"
    puts "\033[31m |        \\\033\[0m/        \\  ___/ / __ \\|  | \\/\\  \\___|   Y  \\___  |"
    puts "\033[31m/_______  /\033\[0m_______  /\\___  >____  /__|    \___  >___|  / ____|"
    puts "\033[31m        \\/\033\[0m        \\/     \\/     \\/            \\/    \\/\\/"
  end
end

def configure(maxhits = nil, yahoo_key = nil, bing_key = nil)
  File.open(ENV['HOME'] + "/.esearchyrc", "w" ) do |line|
    line << "MAXHITS=#{maxhits.to_s || "500"}\n" 
    line << "YAHOOKEY=#{yahoo_key.to_s}\n" if yahoo_key
    line << "BINGKEY=#{bing_key.to_s}\n" if bing_key
  end
end

def read_conf
  File.open(ENV['HOME'] + "/.esearchyrc").readlines.each do |line|
    key, value = line.split("=")
    case key
    when "MAXHITS" then
      @params[:maxhits] ||= value.to_i
    when "YAHOOKEY" then
      @yahoo_key ||= value.chomp
    when "BINGKEY" then 
      @bing_key ||= value.chomp
    end
  end
end

def dump(results)
  # this is for session handling.
end

### PRINTING FINDING METHODS ###
def print_(list)
  unless list.nil?
    list.each do |item|
      case item
      when String
        case RUBY_PLATFORM
        when /mingw|mswin/
          print_windows(item)
        when /linux|darwin/
          print_linux(item)
        end
      when Array
        puts item.join " "
      end
    end
  end
end
  
def print_linux(email)
  if email.match(/#{ESearchy::Search.query.gsub("*","").gsub("@","").split('.')[0]}/i)
    puts "\033[31m" + email + "\033\[0m"
  else
    puts "\033[32m" + email + "\033\[0m"
  end
end
  
def print_windows(email)
  if email.match(/#{ESearchy::Search.query.gsub("*","").gsub("@","").split('.')[0]}/i)
    Wcol.puts(12, email)
  else
    Wcol.puts(2, email)
  end
end

### SAVING TO DISK ###
class Output
  def initialize(name)
    @output = name
  end
  
  def save(data)
    case @output
    when /pdf/
      save_pdf(data)
    when /csv/
      save_csv(data)
    when /sqlite/
      save_sqlite(data)
    end
  end
  
  private 
  def save_csv(data)
    out = File.new(@output, "w")
    out << "ENTITY, TYPE, SITE, CLASS, MATCH\n"
    data.each { |r| out << "#{r[0].to_s},#{r[1]},#{r[2]},#{r[3]}\n"}  
  end
  
  def save_pdf(data)
    require 'prawn'
    require 'prawn/layout'
    
    Prawn::Document.generate(@output) do  
      table data, 
        :position => :center, 
        :headers => ["Entity", "Type", "Site", "Class", "Match"],
        :header_color => "0046f9",
        :row_colors => :pdf_writer, #["ffffff","ffff00"],
        :font_size => 10,
        :vertical_padding => 2,
        :horizontal_padding => 5
    end
  end
  
  def save_html(data)
    
  end
  
  def save_sqlite(data)
    require 'sqlite3'
    @db = SQLite3::Database.new(@output)
    @db.execute("CREATE TABLE IF NOT EXISTS results (
      id integer primary key asc, 
      entity text, 
      type char, 
      site text,
      class text,
      match char);")
      
    data.each do |r| 
      @db.execute("INSERT INTO results (entity,type,site,class,match) 
                   VALUES (\"#{r[0].to_s}\",\"#{r[1]}\",\"#{r[2]}\",\"#{r[3]}\",\"#{r[4]}\");")
    end
    #@db.commit        
  end
end

def execute(p)
  if p[:query]
    search = ESearchy::Search.new(p)
    
    search.start do |s|
      unless @email_engines.empty?
        s.Emails(@email_engines) do |e|
          e.Yahoo.appid= @yahoo_key if @yahoo_key and @email_engines.include?(:Yahoo)
          e.Bing.appid= @bing_key if @bing_key and @email_engines.include?(:Bing)
          e.search do |x|
            dump(x.results)
            print_(x.emails.uniq)
          end
          if @docs
            e.docs do |x| 
              dump(x.results)
              print_(x.emails.uniq)
            end
          end
        end
      end
      
      unless @people_engines.empty?
        s.People(@people_engines) do |p|
          p.search { |p| dump(p.results) }
        end
      end
    end
    
    if @profiling
      puts "Gathering Profile data from people"
      puts "----------------------------------\n"
      res = ESearchy::Profiling.new(search.people.uniq)
      res.search
      search.people.concat(res.people)
      search.results.concat(res.results)
    end
    
    @output.save(search.results) if @output
    puts "\n-------==< FINAL RESULTS >==--------"
    print_ search.emails.uniq
    search.people.uniq.each do |person, profile|
      puts person.join(" ") + " -> " + profile
    end
  end
end

opts.each do |opt, arg|
  case opt
    when '--version' then
      logo
      puts "ESearchy Version #{ESearchy::VERSION}" 
      exit(1)
    when '--help' then
      # BEGIN OF HELP
      logo
      puts "\nHELP for Esearchy\n---------------------\n"
      puts "--help, -h"
      puts "\tWell I guess you know what this is for (To obtain this Help).\n"
      puts "INPUT PARAMS:"
      puts "--query, -q [@domain.com]"
      puts "\t The domain name to search.\n"
      puts "--company, -c [Company Inc]"
      puts "\t The company name to search.\n"
      puts "--website, -w [www.domain.com]"
      puts "\t The website name to spider.\n"
      puts "--yahookey, -y [key]"
      puts "\t The Yahoo API Key .\n"
      puts "--bingkey, -b [key]"
      puts "\t The Bing API Key .\n"
      puts "--filter, -p"
      puts "\t The pattern to use to filter emails.(not fully implemented)\n"
      puts "--file, -f [file_name] "
      puts "\tIf we need to search more than one domain we can provide a list.\n"
      puts "--output, -o"
      puts "\tThe output file name.\n\n"
      puts "PLUGIN OPTIONS:"
      puts "--enable-all"
      puts "\t Enables all ( Emails and People) searches.\n"
      puts "--enable-people"
      puts "\t Enables all People searches.\n"
      puts "--enable-emails"
      puts "\t Enables all Email searches.\n"
      puts "--enable-google"
      puts "\t Enables Google searches.\n"
      puts "--enable-yahoo"
      puts "\t Enables Yahoo searches.\n"
      puts "--enable-bing"
      puts "\t Enables Bing searches.\n"
      puts "--enable-linkedin"
      puts "\t Enables LinkedIn searches.\n"
      puts "--enable-gprogiles"
      puts "\t Enables Google Profiles searches.\n"
      puts "--enable-naymz"
      puts "\t Enables Naymz searches.\n"
      puts "--enable-spoke"
      puts "\t Enables Spoke searches.\n"
      puts "--enable-ggroups"
      puts "\t Enables Google Groups searches.\n"
      puts "--enable-jigsaw"
      puts "\t Enables Jigsaw searches.\n"
      puts "--enable-ziggs"
      puts "\t Enables Ziggs searches.\n"
      puts "--enable-plaxo"
      puts "\t Enables Plaxo searches.\n"
      puts "--enable-pgp"
      puts "\t Enables PGP searches.\n"
      puts "--enable-usenet"
      puts "\t Enables Usenet searches.\n"
      puts "--profiling"
      puts "\t Enables People's profiling.\n"
      puts "--disable-docs"
      puts "\t Disables searches inside docs.\n"
      puts "--disable-google"
      puts "\t Disables Google searches.\n"
      puts "--disable-yahoo"
      puts "\t Disables Yahoo searches.\n"
      puts "--disable-bing"
      puts "\t Disables Bing searches.\n"
      puts "--disable-linkedin"
      puts "\t Disables LinkedIn searches.\n"
      puts "--disable-gprogiles"
      puts "\t Disables Google Profiles searches.\n"
      puts "--disable-naymz"
      puts "\t Disables Naymz searches.\n"
      puts "--disable-spoke"
      puts "\t Disables Spoke searches.\n"
      puts "--disable-jigsaw"
      puts "\t Disables Jigsaw searches.\n"
      puts "--disable-ziggs"
      puts "\t Disables Ziggs searches.\n"
      puts "--disable-plaxo"
      puts "\t Disables Plaxo searches.\n"
      puts "--disable-ggroups"
      puts "\t Disables Google Groups searches.\n"
      puts "--disable-pgp"
      puts "\t Disables PGP searches.\n"
      puts "--disable-usenet"
      puts "\t Disables Usenet searches.\n\n"
      puts "--proxy [127.0.0.1:8080]"
      puts "\t Setup a proxy.\n"
      puts "Copyright 2010 - FreedomCoder\n"
      #END OF HELP
      exit(0)
    when '--enable-all' then
      @people_engines = [:LinkedIn, :Naymz,  :Classmates, :GoogleProfiles,
                         :Spoke,    :JigSaw, :Ziggs,      :Plaxo]
      @email_engines = [:Google, :Bing, :Yahoo, :Altavista, :PGP, :Spider ,:Usenet, :GoogleGroups ]
    when '--enable-people' then
      @people_engines = [:LinkedIn, :Naymz, :Classmates, :GoogleProfiles, 
                         :Spoke, :JigSaw, :Ziggs, :Plaxo]
    when '--enable-emails' then
      @email_engines = [:Google, :Bing, :Yahoo, :Altavista, :PGP, :Spider ,:Usenet, :GoogleGroups ]
    when '--enable-google' then
      @email_engines << :Google
    when '--enable-yahoo' then
      @email_engines << :Yahoo
    when '--enable-bing' then
      @email_engines << :Bing
    when '--enable-altavisa' then
      @email_engines << :Altavista
    when '--enable-spider' then
      @email_engines << :Spider
    when '--enable-linkedin' then
      @people_engines << :LinkedIn
    when '--enable-gprofiles' then
      @people_engines << :GoogleProfiles
    when '--enable-naymz' then
      @people_engines << :Naymz
    when '--enable-classmates' then
      @email_engines << :Classmates
    when '--enable-ggroups' then
      @email_engines << :GoogleGroups
    when '--enable-spoke' then
      @people_engines << :Spoke
    when '--enable-jigsaw' then
      @people_engines << :JigSaw
    when '--enable-ziggs' then
      @people_engines << :Ziggs
    when '--enable-plaxo' then
      @people_engines << :Plaxo
    when '--enable-pgp' then
      @email_engines << :PGP
    when '--enable-usenet' then
      @email_engines << :Usenet
    when '--disable-people' then
      @people_engines = []
    when '--disable-emails' then
      @email_engines = []
    when '--disable-google' then
      @email_engines.delete(:Google) 
    when '--disable-yahoo' then
      @email_engines.delete(:Yahoo)
    when '--disable-bing' then
      @email_engines.delete(:Bing)
    when '--disable-altavisa' then
      @email_engines.delete(:Altavista)
    when '--disable-spider' then
      @email_engines.delete(:Spider)
    when '--disable-linkedin' then
      @people_engines.delete(:LinkedIn)
    when '--disable-gprofiles' then
      @people_engines.delete(:GoogleProfiles)
    when '--disable-naymz' then
      @people_engines.delete(:Naymz)
    when '--disable-classmates' then
      @email_engines.delete(:Classmates)
    when '--disable-ggroups' then
      @email_engines.delete(:GoogleGroups)
    when '--disable-spoke' then
      @people_engines.delete(:Spoke)
    when '--disable-jigsaw' then
      @people_engines.delete(:JigSaw)
    when '--disable-ziggs' then
      @people_engines.delete(:Ziggs)
    when '--disable-plaxo' then
      @people_engines.delete(:Plaxo)
    when '--disable-pgp' then
      @email_engines.delete(:PGP)
    when '--disable-usenet' then
      @email_engines.delete(:Usenet)
    when '--disable-docs' then
      @docs = false
    when '--profiling' then
      @profiling = true
    when '--query' then
      @params[:query] = arg
    when '--company' then
      @params[:company] = arg
    when '--website' then
      @params[:website] = arg
    when '--file' then
      if File.exists?(arg)
        File.open(arg,'r').each_line do |line|
          temp[:query],temp[:company],temp[:website] = line.split(',')
          @list << temp
        end
      else
        raise ArgumentError, "File not found"
        exit(0)
      end
    when '--yahookey' then
      @yahoo_key = arg
    when '--bingkey' then
      @bing_key = arg
    when '--filter' then
      @pattern = arg
    when '--output' then
      @output = Output.new arg
    when '--maxhits' then
      @params[:maxhits] = arg.to_i
    when '--proxy' then
      require 'socksify'
      url, port = arg.split(":")
      TCPSocket::socks_server = url
      TCPSocket::socks_port = port.to_i
    else
      puts "Unknown command. Please try again"
      exit(0)
  end
end

logo
puts "------------------------------------------------------------------------"
puts "REMINDER:" 
puts "- if you want to use GoogleProfiles, LinkedIn, Classmates or Naymz,"
puts "  you will need to use the --company (-c) <company_name> option"
puts "- If you want to spider a website you need to use the --website (-w) <URL> option"

unless File.exist?(ENV['HOME'] + "/.esearchyrc")
  configure(@params[:maxhits],@yahoo_key,@bing_key)
else
  read_conf
end

unless @list.empty?
  @list.each {|p| execute(p)}
end

unless @params.empty?
  execute(@params)
end
puts "\n------------------------"
puts "Happy Hacking :)\nGood Bye.\n"